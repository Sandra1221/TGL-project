产品研发方式和流程

这篇文档汇总了之前散落各处的小文档，用来讨论我们这个阶段改如何进行产品研发工作。

这篇文档只涉及产品研发工作的方法和流程，不涉及其它工作。

所谓产品，在互联网公司中，是指我们交付给最终用户的解决方案或服务。
所谓产品研发，是指直接提升我们的产品价值的工作。

用一句很土的话说，产品管理是科学和艺术的结合。传说 Apple 产品管理手册 Rules of Road 的扉页说，本手册专注于科学的部分，这样子你的脑子能专注在艺术的部分。我们这个简短的文档也是一样的。
Team
我们在产品研发过程中，会按照产品团队进行组织。每个团队的组织方式会根据具体业务阶段不断变动，但在一定 Milestone 周期内是稳定的。

在现在业务阶段和团队规模下，对每个人的要求不仅是做好「本职工作」，需要团队成员都能跳出条条框框，不受传统的职能划分约束，一起来思考有没有更好的方式实现业务目标。

在《启示录》一书中，对软件项目中的角色进行了定义，介绍了我们每天挂在嘴边的各种角色名词具体是什么意思，应当在项目中承担什么样的职能。在我自己看来，创业公司中角色的定义其实并不会变，会变的只是每个人应该更多的站在不同角色视角上来思考问题，能够在不同时期承担更多不同的角色。

前两天读到一篇文章，讲创业公司中的通才和专才，可以参考。https://blog.intercom.io/unicorns-dont-exist-generalists-do/

在一个研发组织中，最常见的角色包括：

Product Manager。职责是通过「产品」的持续规划 (Planning) 和执行 (Execution)，满足用户需求，并取得商业成功。 详见 +About Product Manager。
Designer。Designer 的职责是定义并解决问题。豌豆荚做为一家设计导向的互联网公司，设计师的职责是通过创造卓越的产品，来解决用户的问题。详见 +About Design Team。
Engineer。Engineer 的职责是实施解决方案。

Designer 更侧重在产品价值本身，需要在这点上做到更深；而 Product Manager 更侧重在将产品价值、可行性、营销和变现融合。


Planning
Planning 阶段需要理解用户需求、业务需求、技术需求。通过对需求的理解，定义我们试图为用户解决的问题、相关的业务机会，以及我们可以利用的竞争优势来把解决方案变味成功。

Planning 阶段最后需要回答的问题有两个：
我们为什么要做这个产品 (Product Brief)
产品是什么？
为谁服务，为他们带来什么价值？
如何将产品推向成功？
我们如何做这个产品 (Product Roadmap)
产品的路线图

这些问题需要在进入 Execution 阶段之前回答，并且经过初步验证。

产品 Planning 并不意味着「动口不动手」。要产出一个经过验证的 Plan 并不容易，我们的工作成功，取决于我们能否将「用户/市场」和「产品」完美结合。前者是人，善变、难以捉摸的人；后者是机器——别以为我们很理解机器，我们常常对可行性和工期有数量级的估计误差。因此，要得到经过验证的 Plan，本身需要经过反复探索和迭代，往往也包括原型开发和测试。


关于如何进行 Planning，市场上也有大量的书籍可供参考。记住的一件事情，是 Planning 本身是一个非线性过程，充满了探索和不确定性。在这个基础上，豌豆荚比较多用的是 Design Thinking 系统的 Planning 方法。


Designer 注意: 这里说的 Planning，包括了 The Elements of User Experience 中所说的 Strategy 和 Scope。
Ideation
发现产品机会本身是一个创造性的过程，很难规定流程，这里只能讲一些我们现在做的过程。这些工作，最后都是为了造就一个高质量的 Ideas 备选池。

Design Workshop

我们持续用各种结构化 Design Thinking 方法来进行机会的探索。可以参阅 +About Design Team 中的目录。

Sprint: How to Solve Big Problems and Test New Ideas in Just Five Days，是介绍需求／设计 Sprint 的新书，推荐阅读。

Ideas Brainstorm

全员参与的活动，集中进行一些 Brainstorm 练习。

Prototypes

Prototype 也是产品，只是这个产品的目标不是发布上线，而是验证某个不确定性极高的假设。做什么 Prototypes，取决于 Leadership 对机会的判断。

面向原型的产品团队，应该在两到三周内完成一个体现核心价值的 Prototype 制作，试完成度，可以做用户测试、dogfood 或者内测，除了不会上线运营外，其他和面向用户的产品无异。在如何在极短的时间内做出最接近核心需求的产品并快速验证，需要在执行方式上想很多办法。具体如何来做 Prototypes 还需要参与其中的人不断的进行探寻。

产品停留在纸面上，和拿到手一个半成品的感觉是差别很大的，经常会影响价值判断。要促进创新、保证我们能持续产出创造性的 idea，有「动手不动口」的习惯是很重要的。

以上这些是我们目前正在实施的一些常规活动。这些活动本身不是产出，但需要通过这些活动，最终来交付 Product Brief 和 Product Roadmap。
Product Brief
Product Brief 需要在 Planning 结束后交付，需要回答如下问题：

产品 (我们的解决方案)
市场 (我们解决什么问题? 我们为谁解决这些问题？这些问题为什么对他们有吸引力？)
我们能得到什么好处 (增长、营收?)
我们的实施计划 (投入、成本)
竞争推演

这是我们目前的 Product Brief 模版。 +Product Brief Template (2016)

很多同学写误以为这是要立项一个项目要做的第一件准备。其实不是——这是发起冲锋的号角。当你顺利回答完 Product Brief 中的问题，意味着所有准备的工作都已完成——你已经做了很多分析、研究，推演了各种各样的策略，甚至你已经做了原型设计，和工程师已经做出了原型产品，甚至你已经做了用户测试... 这些功课都做完，你已经了然于胸，这时候，写出一个 Product Brief 是顺理成章的事情。


我们也在尝试通过 Business Model Canvas 和 Value Proposition Design 来取代 Product Brief。
Product Roadmap & Milestone
每个产品团队在一个阶段都会为共同为一个 Milestone 而努力，传统定义中，Milestone 有三个要素：目标、时间和资源。

每个 Milestone 都有一个非常具体的需求目标。对于产品团队，每个 Milestone 的需求目标是一个完整的 User Story。Milestone 内，应完成符合需求目标的 MVP 功能／产品研发，并达到可对外发布的状态。这个目标应该是指导团队工作的最高准则，不论具体的 Plan 是什么，每个人在做每件事之前都应该思考一下，当下这个事情和目标的关系是什么，能不能用别的方式做到更好或者更快。

Milestone 不仅是有目标，还有预期的时间点。在过往的执行中，我们对时间点的重视程度不足容易拖延。在后续，我们会更认真的来恪守每个 Milestone 的时间点，当然这对执行的要求会更高，既要高质量的产出又要不错过时间点，该如何实现？除了更努力之外，还需要做更多的决策，不断调整具体执行的 Plan，去掉那些看上去 “过度” 的考量，留下真的对目标有最大价值的事情，真正做到 MVP (Minimum Viable Product)。

按照我们过去执行的一些感受，会把每个 3–5 人团队 的 Milestone 的执行时长确定在 1～1.5 个月，即 4 ~ 6 人月的研发人力（总的人月可以按比率脑补…）。

我们把 Milestone 用 Roadmap 的方法来编制。Roadmap 文档中列举我们现在看到的所有和业务目标有关的 Milestone，并规定了优先级，保持对进度的工具。它是全面了解公司项目运营状态的重要工具。

Roadmap 中记录的项目单元即上面说到的 Milestone。Roadmap 的文档格式参见这里：
https://docs.google.com/spreadsheets/d/1nAy96yLZU66jb62iOSLEVfv4mdi1i1PhXnFb1O985ig/edit
其中，一些不是那么显而易见的信息包括：

Summary。产品或功能名。
跟给孩子和猫起名一样，产品或功能名，即使只是代号，也会被经常念叨，所以请一定认真对待。
Detail。用 User Story 的格式来撰写该 Milestone 的需求。
Priority。根据 Impact 和 Effort 综合考虑的优先级，分成 High、Medium 和 Low，High 表示要全力以赴保障，Medium 是插空来做，Low 基本是除非有额外时间否则不做。优先级由 Leads 团队在 Weekly 上不断循环 review。
Effort。工作量，分 1、2、4、74 几档，1 表示花点时间可以搞定，2 表示需要费点力气，4 表示工作量很大，74 表示很难预估。
Impact。一些对工作影响力的评估。影响力的评估方法随不同阶段的 Strategy 有不同的方法。
Contacts。负责的 PM、Techlead、Designer
Specs。PRD、Design Spec、Tech Spec 在 Ready 后填入。
Status。项目进度，包括：无 (未开始)、In Progress、Launched、Cancelled、Problem、等状态，在整个 Q 都持续在跟进中。

我们的 Roadmap 中没有发布日期，这是有意为之的。高优先级的工作自然排在前面——无论何时，我们都应该工作在当时最重要的事情上，做完最重要的事情再往下挪。而 Leads 每次 review，也就是 review 优先级是否有变化。在 Milestone 只包括研发工作，不包括发布本身，何时发布如何发布，是另一件事情。

但确实我们在实际工作中需要用到发布日期，所以这是 Roadmap 中有一个 “Release” 表格，反映「搭车」关系。每个客户端的发布版本都会搭载一系列的改动，而这些改动如果不 ready，则可以拿走。

这个过程希望达到的目标包括：1) Leadership 团队应该对产品团队目前对工作有完全对透明度，当我们的优先级变化，需要及时作出响应。2) 它要求我们非常自律。如果我们要插入一个事情，就必须有另外的事情在队列中降级。3) 产品团队和 Product Manager 既有明确的方向，又对执行过程完全自治。
OKRs
+OKRs 

OKRs 起到的作用是沟通和对齐目标。豌豆荚传统，这里不再赘述。

OKRs 应由上级主导制定，下级修改确认。
Summary
总结一下，这里的交付物包括
 Product Brief
 Product Roadmap
 Product Team OKRs

流程中的会议包括
 Leads Weekly。每周一，公司的 leadership 应该反复 review Roadmap 和 OKRs，对优先级进行调整，以确保我们 focus 在最重要的事情上。
Execution
产品进入执行后，生命周期分为四个阶段：Definition、Development、Launch、Operation。

Definition: 定义产品。定义产品的阶段也绝不仅是纸上谈兵，需要 get hands dirty 来知道真实世界会如何对这些产品进行反馈。原型制作、用户测试、甚至是线上实验，都是 Design 过程的一部分。
Development: 将产品的定义转化为可提交到生产环境的代码的过程。
Launch: 对线上生产环境的代码进行修改的过程。
Operation: 通过非修改生产环境代码的方式对线上生产环境进行改进的工作。

不同的阶段之间并不是完全按顺序的，我们可能会出现反复。一个阶段完全、100% 确定后再进入下一个阶段，会很大地损害执行速度；但不同阶段之间也需要明确地沟通不确定性。
W/W Plans
在明确了 Roadmap 和 OKRs 之后，就可以分团队来拆分 W/W Plans 了，W/W Plans 的作用包括：
做充分的预估，使得 Milestone 落成可执行计划的，并随时可进行矫正（完全恪守 W/W Plans 的计划并不是目标，W/W Plans 应该在项目运行中不断的进行调整，最终保障 Milestone 的目标可以实现）
分配资源，尤其是人力资源，明确每个人在每个阶段的工作，最大化每一个人的价值

W/W Plans 在这里：
https://docs.google.com/spreadsheets/d/11sVLRZLE4VZPrFGnsb2Ol7lMIK-jMk_BOe6tqFTEEoU/edit
其中，除了包括各项目的 W/W Plans，还包括各项目的人力划分，期望放进表格中的每个人都能被该业务最大化价值，职能边界并不是最重要的，只要对业务有利完全可以跳出固有的职能范围承担更重要的事情。

w/w Plan 需要考虑关键的内部里程碑如何规划 (dogfood, beta, full launch)，什么地方应该重新评估项目？如何进行风险控制？等等。
Definition
Definition 过程中，需要根据已有的 Plan 来定义我们具体的工作。这里面也有很多 User-centered Design 的方法，无法详尽。这里有不少工作和 Planning 工作是重合的，属于正常。

在这一阶段结束时，应该交付三个文档：

Product Requirement Document: 功能规格说明 (产品应该如何工作)
Technical Design: 技术规格说明 (产品应该如何实施)
Marketing Plan: 市场规格说明 (产品应该如何和用户沟通)

记住，我们前面说过，不应该预期 100% 确定才进入下一阶段。争取时间 time to market 的时间也是整个流程里面很重要——甚至是最重要的目标。

Product Requirement Document (PRD)

PRD 是研发工作最重要的依据。在进入研发前，需要完成 PRD，并进行讨论和 Review。PRD 是从用户的视角，来描述产品会如何工作。一般包括：

Overview。总结之前在 Planning 阶段的结论，定义产品要解决的问题。
产品详细设计。这一部分应该占文档面积 80% 以上，包括功能清单、这些功能在用户看来的工作方式，包括不同层级的 Design 交付物。详见 +About Design Team。
风险和影响。已知风险，对其它产品、职能、未尽事宜等等，如平台支持部分、运营部分等等。

注意，PRD 不是一个在开发前匆匆完成的文档。当一个项目有立项的时候，就应该建立这样的文档，不断往里填充内容。要回答 PRD 中的每个问题，需要做很多工作。文档只是一个终点。


PRD 也不一定需要是个「文档」，尤其是其核心的「详细设计」部分，很多时候用非文字来呈现还会有更好效果。文档只是沟通工具。

PM 在这个工作中应该尤其注重成本。这是 Designer 不需要负责，但是 PM 需要考虑的问题。Designer 的目标是把产品做到极致，而 PM 的工作要在设计、研发、营销中找到结合点，应该设法用更低的成本来实现最接近的效果。我们在创业公司，资源尤其有限；PM 应该设法利用有限的资源来达到目标。

这是最新版本的模版：+Product Requirement Document Template 2016  

Technical Design

Tech Design 应该包括
重申项目概览，PRD 中的要点
系统架构
数据库
后端系统的 API 等等
Logs

Logs 需求很容易被忽略，但又非常重要。请填写到这个文档中：
https://docs.google.com/a/wandoujia.com/spreadsheets/d/1dbCX6omTpa_qP0ZitgDCZ7csbyfZw5LIO7tUoPolnbg/edit?usp=sheets_home

Marketing Plan

Marketing Plan (Launch Plan) 应该包括:
重申项目概览、PRD 中的要点，尤其是对目标用户的理解、Competitive Analysis、Product Value Proposition
Consumer Insight: 目标用户在认知上的了解
Message House
Roadmap 和 Action Plan
产品命名和功能命名
Copy Writing
Development
Milestone 本身是一个黑盒，它只在乎定时完成目标即可，但在具体执行阶段还是需要有更清楚的方式来保障落地。每个 Milestone 会被切分成 1～N 个 Sprint，通常每个 Sprint 持续一周，通过把 Milestone 切分成 Sprint，就可以有一定的预估，确保这个 Milestone 是可执行的。而在具体每个 Sprint 迭代过程中，可以依据实际执行情况及时调整计划，确保 Milestone 的完成。

Scrum 是比较常用的，用来做 Sprint 的方法论。《硝烟中的Scrum和XP》是一本非常简明可实践的小书，寓教于乐，很适合翻阅。

Board

在 Scrum 中，看板（Board）是最重要的信息汇聚地，它可以涵盖全部的信息，以及围绕展开的相应流程。


一个典型的看板，长成上图这个样子。左半部是这个 Sprint 规划要做的事情，每张黄条是一个 Task，它上面描述了要做的事情和预估的工时，工时按人天计算，必须是 0.5 的倍数，通常如果超过 1~2 人天，可以考虑再拆分一下。按列看，每个 Task 有三个状态，Not Checked Out 表示还没开始做 (TODO)；Checked Out 表示正在做 (Doing)；Done 表示完成了 (但尚未测试)。按行看，每行是一个 Story (白色的条子)，所谓 Story 是可以可完成发布的东西（比如收藏功能、新版卡片，等等），在执行时，应该尽量完成同一 Story 的 Task，这样即便没有完成全部的 Story 也不会沦落到没有一个 Story 可发布的状态。

右上部，是一个图表，俗称燃尽图，它的作用是把左半部密密匝匝的条子们漂亮的可视化出来，对这个 Sprint 的健康状况一目了然。它的横轴是时间（比如一周 5 天，就 1–5），纵轴是工作量（等同于左边黄条工时的总和）。理想情况下，所有 Task 都按时按量完成，按天打点就能连接出一条从左上到右下的直线（如图中灰色线条），但大部分的实际情况不尽如此，有的时候完成状况良好（有时快有时慢但最后都做完了），可以绘制出一条围绕灰色线的曲线（如蓝色线所示），还有的时候做的太慢，整个蓝线都处于灰线上方，这说明燃尽速度不够，需要考虑对策了。

在右下，是下个迭代正在 Planning 的事情（对于研发项目而言，通常是需求和设计），它有两个状态，一个是 Unplanned，说明这个想法还需要进一步细化或者做设计；还有一个状态是 Next，这说明该想的都想完了，就等执行了。把下个迭代的事情放进来有很多好处，一方面是团队里每个人在做的事情都能有所体现（测试中的没有，可以令做规划），另一方面，它也是时间关键的事情，如果这里面是空的，那么下个 Sprint 就要断粮了。有一种情况，就是预估的工时有点多，团队执行太快燃尽速度在灰线下，这时候还可以把 Next 中的事情提前放出来执行。


（在公司，会有很多 Sprint 在进行，我们可以把它们聚集在一个大的看板上，有种感觉是整个公司的事情都一眼看尽了

Daily Sync

看板时代，Daily Sync 的形态就是找个时间聚在看板前，分别介绍一下自己对黄条/白条的影响，比如哪个黄条 Done 了，哪个黄条我取出来 Doing 了，哪个 Store 完成设计了，等等。每天 Daily Sync 完成后，会重新标示燃尽图，挪动纸条，进入新的状态。

Daily Sync 的时间是非常有意思的话题，大部分时候是晚上，但其实这个并不是最好的时间，因为每天晚上的感觉更像检查工作而不是规划工作（尤其考虑大部分工作都是晚上完成的…）。中午之类的时间会更差，这会打断大部分人手里的工作和思绪，使得节奏变得更差。最好的时间，其实是早上，大家站在一起回忆一下昨天的事情，更重要的是规划一下今天的事情，那种感觉一天的事情都想清楚了（早上的时间并不是固定某个时间，而是根据团队状况挑一个大部分开始工作的时间，比如 10:30/10:45 之类的，如果有人不能来，可以晚一点过来站在看板前 Follow Up 一下）。

Sprint Meetings

每个 Sprint 都应该有两个很重的会议，一个是 Plan，一个是 Review（很多时候也会合二为一）。如果以看板为核心，会议的形式可以非常简单，直接站在看板前做就好。Review 的时候可以大家对着看板看看（可拍照留念），这个 Sprint 都做了什么东西，燃尽图长成什么样子，然后都讨论一下为什么，有什么地方做得好有什么地方需要改进。有了结果之后，可以清理看板（Done 了 Story 需要存档进入测试），并立刻进入下一个 Sprint 的讨论，选出新的 Store（留下来没完成的和 Next 里面的）、预估工时、重新整理看板，等等。新的一个 Sprint 就这样开始了。

Scrum Master

在 Sprint 中，做特殊的角色是迭代的负责人（Scrum Master），这是一个角色，可以由任何人承担(PM、Design、Engineer、Tester，and so on)，唯一的门槛是需要对基本的流程和看板上的 Store 有所了解。他例行的工作是整理看板、张罗 Sync、解释流程、记讨论笔记之类的，最重要的，是当项目执行出现异常时（比如：燃尽速度不够、Store 定义出现模糊，等等），可以来协调相关的同学讨论解决，确保整个 Sprint 的执行风险可知。

Dogfood

“Eat your own dogfood.” 保证我们自己是自己产品的最忠实用户，能保证我们自己总能在第一时间发现问题和机会。豌豆荚自己有 200 名最重度的移动互联网用户，针对他们做好运营工作，能帮助你在产品发布前拿到许多宝贵的反馈，确保正式发布无误。最重要的一个事情，是不要不把豌豆当用户，要认真做好内部运营。

你的产品应该有一个 *-discuss 的邮件列表，用这个邮件列表来吸引对你的产品最关心的其它豌豆，在内部建立你的 KOL 群体，他们可以在其中讨论你的产品。
把 dogfood 要求发给 team@。认真写好这封邮件，认真去想如何推销你的新产品、新功能，就像你对媒体、微博推销一样，要让其它豌豆愿意付出时间来帮忙测试你的产品，是一件需要认真对待的事情。同样地，尽可能把 dogfood 流程变得简单，降低大家的测试成本。对，就像你对你的用户一样。
提供一个可快速收集反馈的渠道。一般大家会建立一个所有人都可编辑的 Sheet / Doc 来收集。Sheet 更容易结构化，而 Doc 便于贴图、讨论，取决于需要。不要使用表单，使用表单的话，提交者看不到其它人提交的反馈，效率过低。
收集 idea。用 Google Moderator、组织 Workshop 都是更高效率、更结构化地榨取其它豌豆的脑汁的方法。豌豆们普遍脑汁旺盛，不仔细设计，有时候也会失去控制，对你的 launch 造成干扰。
及时响应内部的反馈。你不需要对所有的建议、要求 (不管来自哪里，包括老板) 说 “yes”，但一定要及时反馈，给大家讲解你的想法，学会把批评变成建设性的讨论，而不是落到无意义的争论中。

也需要学会管理别人的期望，事先对产品中不完善之处进行提醒。成功的 dogfood，能收集到非常具体的批评意见 (“我用____按钮的时候经常会点歪到右侧去”)，也会有很多模糊的赞扬 (“好美。”)；但千万不要变成非常模糊的批评意见 (“长太丑” “不顺眼”)，或非常具体的赞扬 (“呀你的眉毛真好看”)。

记住，一定要把豌豆也当成用户来对待。但又一定要提醒豌豆们，用第一人称，不要用 “用户” “人们” “我有一个朋友” 来代表自己的感受。要鼓励他们勇于表达自己真实的感受。也要记住，豌豆不是普通用户，如果你在豌豆荚内部做定量调查... 千万不要误以为这就是所有用户。

Pre-launch Review

在正式发布之前，带有豌豆荚品牌的 App 都需要经过 Exe 团队 Review 确保产品的质量符合豌豆荚的品牌定位。
Launch
Launch 指对线上应用的代码进行修改。Launch Process: 为了 Launch 而进行的，产品研发工作之外的额外工作

Launch Process 的设计目标

避免产品发布过程中的低级错误
保证和产品发布有关的沟通的及时和准确性

Launch Checklist

这些 checklist 的设计目的是经常有一些内容是会影响到其它团队，但这些团队并不参与产品的研发。我们并不想给这些检查点各自设立专门的 review 流程，因此请 PM 自问自答。回答 “是” 的部分，相应团队会收到通知。为保证提前量，请 PM 自行在七天 deadline 前在系统中回答 checklist (是或否)。

这里列出了目前适用于 Design & Tech 的发布 checklist。

这些项目，即使大多数时候的回答是「否」，但也请认真阅读并和对应的团队确认。

Legal
 可能带来法律风险。例如侵犯他人版权、商标，产品设计或技术实现有抄袭嫌疑等。
请联系 policy 确认风险和规避建议
 提供的服务超出或者违反了现有的最终用户协议例如提供了新的 UGC 功能，或新开始收集用户的地理位置信息等。
请联系 policy 确认是否需要调整 TOS，以及是否需要专门的用户确认
 可能含有涉黄/政治敏感等不良信息，无论是机器抓取的还是用户产生的，例如提供了新的 UGC 功能、或者开始提供短视频内容都可能带来敏感内容。
请联系 policy 确认风险和规避建议
 涉及国家管控领域，可能需要单独办理经营许可牌照，例如互联网金融、支付、视频、电视、彩票等。
请联系 policy 确认是否需要申请新牌照
 可能引起用户或合作伙伴反感及投诉、甚至恶化为负面舆论，例如重大产品功能下线，首发合作停止，用户觉得隐私受到侵犯或大量耗费流量，竞品觉得我们有模仿嫌疑，发布和「手机娱乐搜索」定位无关的新产品等。
请联系 policy 确认风险并准备预案

EP
 是否会引起网络带宽的大幅增加
请和 EP 团队提前确认流量高峰
 本次发布需要申请新的服务器资源
请提前向 EP 团队申请所需的服务器资源
 有新增的视频、安装包、flash 等等，不属于原有下载方式的全新文件供用户下载
请联系 EP 团队一起完成文件的部署
 本次发布有一个全新的服务上线，而不是在原有系统升级，因此需要添加监控
请联系 SRE 团队一起完成监控的添加

Operations
 大部分用户 (指该产品的用户，而非豌豆荚的整个用户群体）使用产品的主要流程发生明显的变化
请通知 Operations 团队

Launch Tasks

如果你以上的所有工作都完成，就可以进行上线本身了。Launch 本身有许多工作要做，比如

 将服务部署到生产环境
 进行压力测试
 进行安全性测试
 进行性能测试
 设置 Muce 报表
 设置域名
 设置重定向
 提交到 App Store
 保证被搜索引擎收录
 发布内部公告和庆祝

建议保持一个精确到小时的 launch checklist。Launch 时，建议大家组织一个 warroom，坐在一起，打开 Google Analytics 的实时报表。很好玩的。
Operations
产品上线后，进入正常运营环节。PM 既然负责产品的最终商业成功，有一大半的工作这时候刚刚才开始。

产品死亡的两大可能性：1. 没有用。2. 有用，但没有人用。


如果你对这之前的流程管理得当，问题 1. 应该可能性不大。那么，上线后，如果确定产品很有用，重点就是如何和潜在用户沟通，让它被更多的用户用到。这里，有大量到工作是和 Marketing (包括品牌和渠道) 一起合作，将产品的已有价值推向更多用户。

Growth Daily Sync

每天中午，Review 前一天的产品增长 (使用量、收入) 数据，做出对策。PM、Marketing 需参与。

User Feedback Review

每隔一段时间，和 User Operations 团队共同 review 用户的反馈，为下个阶段的产品开发提供参考。

发布后，就需要考虑产品迭代了。如果是对当前产品的工作量不大的小修正，可以直接发布小版本进行更正。如果在其中发现了很大的产品机会或者调整，就需要从头走一遍整个过程。


小版本的发布，优先级可以由 PM 自己决定。优先级的决策依据大致是：影响的用户面、对这些用户对有用程度、成本
Review
不是说只有四个环节么…


这个环节确实不是研发的一部分。但按照 Lean Startup 理论，最重要的不是产品发布，而是产品发布后我们有什么新的 learnings 可以用于下一个迭代。如果火箭发射失败，不要紧。但如果你和团队什么也没有学到，那很要紧。所以，不管是什么事情做错或者做对了了，一定要做 post-mortem，也就是复盘。


复盘的目的不是停留在过去，而是为未来提供更多 insights。做为一个 PM，积累经验最快的循环，就是从 idea 产生到发布并看到真实世界的反馈这样的循环，一定要想尽办法让这个循环更快、更高效率。


成功的发射也一定要记得总结什么地方做对了。

Post-mortem (复盘)

在每个 Milestone 的产品发布上线后，需要根据实际运营状况对 Milestone 的产出进行总结。

这个总结关注点集中在产品本身 (具体迭代的问题，在每个 Sprint 的 Meeting 上来讨论)，通过数据指标来对照产品立项时的指标有没有达到。哪些判断对了，哪些不对，需要做哪些调整，等等。

同时，这里还希望对整个 milestone 执行过程进行复盘，来看中间的决策过程、迭代过程，重新再做一次什么地方可以缩短时间、做得更好。
Summary
交付物

 W/W Plan

Definition
 PRD
 Technical Design
 Operations Plan
 Marketing Plan
 Logs Spec

Development
 产品命名和包装 (名字、域名、URL、Package Name、Landing Page、推广素材)
 Dogfood
 开发完成的产品 (Release Candidate)

Launch
 Launch Process Checklist
 Launch Tasks

Operations
 Review

Review
 Post-mortem

会议

 PRD Review
 Tech Review
 Design Review
 Marketing Review
 Pre-launch Review
 Growth Daily Sync
 User Feedback Review
 Post-mortem
Reference
Making it Right
Lean Startup
Inspired
Google 产品经理手册
我们以前的 PM Manual 和 Product Lifecycle and Launch Process

